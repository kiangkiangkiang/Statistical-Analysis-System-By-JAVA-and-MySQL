/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package datamining;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author user
 */
public class DM extends javax.swing.JFrame {

    Connection conn = null;//java.sql to debug  
    String query = "Select * from h;";
    Connection imageConn = null;//need another connection save image to sql
    String insertimageQuery = "insert into chart_image values (?,?,?)";
    int chart_id = 0;
    ResultSet result = null;
    ResultSet imageRS = null;
    public int[][] EveryAreaCrime = new int[7][2];
    public JFreeChart chart = null;
    public static boolean hasData = false;
    int colSize = 0, rowSize = 0;
    ArrayList dataList = new ArrayList();
    String[] columnNames;
    String[] columnNames_default = {"Area", "Year", "Month", "Drugs", "Police station",
        "Parade", "Religion", "Steal", "School", "Divorce", "Accident", "Teenager crime"};
    /*String[] columnNames = {"縣市", "區", "年", "月", "毒品案件數","派出所數量"
                ,"集會次數","宗教團體數","竊盜案件數","學校數","離婚筆數"
        ,"交通案件數","青少年犯罪數(竊盜)"}; */
    Object[][] data;

    /**
     * Creates new form DM
     */
    public DM() {
        initComponents();
        //displayDemoTable();
    }

    /*void displayDemoTable() {
               //				

        Object[][] data = {
            {"Kathy", "Smith", "Snowboarding", new Integer(5), new Boolean(false)},
            {"John", "Doe", "Rowing", new Integer(3), new Boolean(true)},
            {"Sue", "Black", "Knitting", new Integer(2), new Boolean(false)},
            {"Jane", "White", "Speed reading", new Integer(20), new Boolean(true)},
            {"Joe", "Brown", "Pool", new Integer(10), new Boolean(false)}
        };
        data_TBL.setModel(new DefaultTableModel(null, columnNames));
        data_TBL.getTableHeader().setFont(new Font("Arial", Font.BOLD, 16));//第二個參數 有加黑 斜體字 底線等等
        this.setLocationRelativeTo(null);
    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DataSet_JDL = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        data_TBL = new javax.swing.JTable();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        Predict_DL = new javax.swing.JDialog();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        Show_TBP = new javax.swing.JTabbedPane();
        ChooseArea_PNL = new javax.swing.JPanel();
        Area1_CMBX = new javax.swing.JComboBox<>();
        Area2_CMBX = new javax.swing.JComboBox<>();
        Area1_LB = new javax.swing.JLabel();
        Area2_LB = new javax.swing.JLabel();
        ShowPie_BTN = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        summary_TA = new javax.swing.JTextArea();
        TaiwanTeenagerCrime_PNL = new javax.swing.JPanel();
        _2D3D_BTNGRP = new javax.swing.ButtonGroup();
        Analysis_JDL = new javax.swing.JDialog();
        SQL_PNL = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        sql_TA = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        Submit_BTN = new javax.swing.JButton();
        SaveChart_BTN = new javax.swing.JButton();
        ShowPieChart_BTN = new javax.swing.JButton();
        browseSaveChart_BTN = new javax.swing.JButton();
        jInternalFrame4 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataAnalysis_TBL = new javax.swing.JTable();
        browseChart_DLG = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chartID_TF = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        description_TA = new javax.swing.JTextArea();
        previous_BTN = new javax.swing.JButton();
        next_BTN = new javax.swing.JButton();
        ConnectImageDB_TGLBTN = new javax.swing.JToggleButton();
        jPanel9 = new javax.swing.JPanel();
        chartImage_LBL = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        FindData_BTN = new javax.swing.JButton();
        DataSet_BTN = new javax.swing.JButton();
        Conn_DB = new javax.swing.JButton();
        Analysis_BTN = new javax.swing.JButton();
        Predict_BTN = new javax.swing.JButton();
        welcome_LB = new javax.swing.JLabel();
        exit_BTN = new javax.swing.JButton();
        ClearData_BTN = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        FindExistData_MI = new javax.swing.JMenuItem();
        SetGraphType_MB = new javax.swing.JMenu();
        _2D_CKBX = new javax.swing.JCheckBoxMenuItem();
        _3D_CKBX = new javax.swing.JCheckBoxMenuItem();

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jInternalFrame2.setVisible(true);
        jInternalFrame2.getContentPane().setLayout(new java.awt.GridLayout(1, 2));

        data_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(data_TBL);

        jInternalFrame2.getContentPane().add(jScrollPane1);

        jPanel2.add(jInternalFrame2);

        DataSet_JDL.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jInternalFrame1.setVisible(true);
        jInternalFrame1.getContentPane().setLayout(new java.awt.GridLayout(1, 2));

        Predict_DL.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jInternalFrame3.setVisible(true);
        jInternalFrame3.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        Show_TBP.setFont(new java.awt.Font("微軟正黑體 Light", 1, 12)); // NOI18N

        Area1_CMBX.setFont(new java.awt.Font("微軟正黑體 Light", 1, 18)); // NOI18N
        Area1_CMBX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "臺北市", "新北市", "高雄市", "臺南市", "桃園市", "臺中市" }));
        Area1_CMBX.setSelectedIndex(-1);
        Area1_CMBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Area1_CMBXActionPerformed(evt);
            }
        });

        Area2_CMBX.setFont(new java.awt.Font("微軟正黑體 Light", 1, 18)); // NOI18N
        Area2_CMBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Area2_CMBXActionPerformed(evt);
            }
        });

        Area1_LB.setFont(new java.awt.Font("微軟正黑體 Light", 1, 22)); // NOI18N
        Area1_LB.setText("縣市(六都)");

        Area2_LB.setFont(new java.awt.Font("微軟正黑體 Light", 1, 22)); // NOI18N
        Area2_LB.setText("區");

        ShowPie_BTN.setFont(new java.awt.Font("微軟正黑體 Light", 1, 18)); // NOI18N
        ShowPie_BTN.setText("Show Pie");
        ShowPie_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPie_BTNActionPerformed(evt);
            }
        });

        summary_TA.setColumns(20);
        summary_TA.setFont(new java.awt.Font("微軟正黑體 Light", 1, 18)); // NOI18N
        summary_TA.setRows(5);
        summary_TA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Summary", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微軟正黑體 Light", 1, 14))); // NOI18N
        jScrollPane4.setViewportView(summary_TA);

        javax.swing.GroupLayout ChooseArea_PNLLayout = new javax.swing.GroupLayout(ChooseArea_PNL);
        ChooseArea_PNL.setLayout(ChooseArea_PNLLayout);
        ChooseArea_PNLLayout.setHorizontalGroup(
            ChooseArea_PNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChooseArea_PNLLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(Area1_LB)
                .addGap(18, 18, 18)
                .addComponent(Area1_CMBX, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(Area2_LB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Area2_CMBX, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(ShowPie_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ChooseArea_PNLLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );
        ChooseArea_PNLLayout.setVerticalGroup(
            ChooseArea_PNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChooseArea_PNLLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(ChooseArea_PNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShowPie_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ChooseArea_PNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Area1_LB, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Area1_CMBX, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Area2_CMBX, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Area2_LB, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        Show_TBP.addTab("Choose Area", ChooseArea_PNL);

        TaiwanTeenagerCrime_PNL.setLayout(new java.awt.GridLayout(1, 0));
        Show_TBP.addTab("Taiwan Teenager Crime", TaiwanTeenagerCrime_PNL);

        Show_TBP.setSelectedComponent(TaiwanTeenagerCrime_PNL);

        jInternalFrame3.getContentPane().add(Show_TBP);

        Predict_DL.getContentPane().add(jInternalFrame3);

        Analysis_JDL.setTitle("Analysis");
        Analysis_JDL.getContentPane().setLayout(new java.awt.GridLayout(1, 2));

        SQL_PNL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SQL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("微軟正黑體 Light", 1, 14))); // NOI18N
        SQL_PNL.setLayout(new java.awt.GridLayout(2, 1));

        sql_TA.setColumns(20);
        sql_TA.setRows(5);
        jScrollPane3.setViewportView(sql_TA);

        SQL_PNL.add(jScrollPane3);

        Submit_BTN.setFont(new java.awt.Font("微軟正黑體 Light", 1, 14)); // NOI18N
        Submit_BTN.setText("Submit");
        Submit_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_BTNActionPerformed(evt);
            }
        });

        SaveChart_BTN.setFont(new java.awt.Font("微軟正黑體 Light", 1, 14)); // NOI18N
        SaveChart_BTN.setText("Save Pie Chart");
        SaveChart_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveChart_BTNActionPerformed(evt);
            }
        });

        ShowPieChart_BTN.setFont(new java.awt.Font("微軟正黑體 Light", 1, 14)); // NOI18N
        ShowPieChart_BTN.setText("Show Pie Chart");
        ShowPieChart_BTN.setEnabled(false);
        ShowPieChart_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPieChart_BTNActionPerformed(evt);
            }
        });

        browseSaveChart_BTN.setFont(new java.awt.Font("微軟正黑體 Light", 1, 14)); // NOI18N
        browseSaveChart_BTN.setText("browseSaveChart");
        browseSaveChart_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSaveChart_BTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(Submit_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(browseSaveChart_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShowPieChart_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(SaveChart_BTN)
                .addGap(29, 29, 29))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Submit_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ShowPieChart_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveChart_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(browseSaveChart_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        SQL_PNL.add(jPanel3);

        Analysis_JDL.getContentPane().add(SQL_PNL);

        jInternalFrame4.setVisible(true);
        jInternalFrame4.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        dataAnalysis_TBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(dataAnalysis_TBL);

        jInternalFrame4.getContentPane().add(jScrollPane2);

        Analysis_JDL.getContentPane().add(jInternalFrame4);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Basic Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        jPanel8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Description");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("chartID");

        chartID_TF.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        description_TA.setColumns(20);
        description_TA.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        description_TA.setRows(5);
        jScrollPane5.setViewportView(description_TA);

        previous_BTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        previous_BTN.setText("previous");
        previous_BTN.setEnabled(false);
        previous_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previous_BTNActionPerformed(evt);
            }
        });

        next_BTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        next_BTN.setText("next");
        next_BTN.setEnabled(false);
        next_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_BTNActionPerformed(evt);
            }
        });

        ConnectImageDB_TGLBTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ConnectImageDB_TGLBTN.setForeground(new java.awt.Color(255, 0, 0));
        ConnectImageDB_TGLBTN.setText("Connect image DB");
        ConnectImageDB_TGLBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectImageDB_TGLBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(chartID_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(previous_BTN)
                        .addGap(18, 18, 18)
                        .addComponent(next_BTN)
                        .addGap(26, 26, 26)
                        .addComponent(ConnectImageDB_TGLBTN))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(280, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(chartID_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previous_BTN)
                    .addComponent(next_BTN)
                    .addComponent(ConnectImageDB_TGLBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        browseChart_DLG.getContentPane().add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Image", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(255, 51, 0))); // NOI18N
        jPanel9.setLayout(new java.awt.GridLayout(1, 1));

        chartImage_LBL.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        chartImage_LBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chartImage_LBL.setText("Image");
        chartImage_LBL.setPreferredSize(new java.awt.Dimension(900, 700));
        jPanel9.add(chartImage_LBL);

        browseChart_DLG.getContentPane().add(jPanel9, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FindData_BTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        FindData_BTN.setText("FindData");
        FindData_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindData_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(FindData_BTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 164, 115, 65));

        DataSet_BTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        DataSet_BTN.setText("DataSet");
        DataSet_BTN.setEnabled(false);
        DataSet_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataSet_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(DataSet_BTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 341, 118, 67));

        Conn_DB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Conn_DB.setText("Conn_DB");
        Conn_DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Conn_DBActionPerformed(evt);
            }
        });
        jPanel1.add(Conn_DB, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 341, 115, 67));

        Analysis_BTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Analysis_BTN.setText("Analysis");
        Analysis_BTN.setEnabled(false);
        Analysis_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Analysis_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Analysis_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(Analysis_BTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 247, 115, 67));

        Predict_BTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Predict_BTN.setText("Predict");
        Predict_BTN.setEnabled(false);
        Predict_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Predict_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(Predict_BTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 247, 118, 67));

        welcome_LB.setFont(new java.awt.Font("Elephant", 1, 24)); // NOI18N
        welcome_LB.setText("    Welcome To Our Crime Analysis System");
        welcome_LB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        welcome_LB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(welcome_LB, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 26, 579, 111));

        exit_BTN.setBackground(new java.awt.Color(255, 102, 102));
        exit_BTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/exit.jpg"))); // NOI18N
        exit_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(exit_BTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 240, 70, 80));

        ClearData_BTN.setFont(new java.awt.Font("微軟正黑體 Light", 1, 14)); // NOI18N
        ClearData_BTN.setText("Clear Data");
        ClearData_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearData_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(ClearData_BTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 164, 118, 65));

        file.setText("File");

        FindExistData_MI.setText("Find Exist Data");
        FindExistData_MI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindExistData_MIActionPerformed(evt);
            }
        });
        file.add(FindExistData_MI);

        jMenuBar1.add(file);

        SetGraphType_MB.setText("Set Graph Type");

        _2D3D_BTNGRP.add(_2D_CKBX);
        _2D_CKBX.setSelected(true);
        _2D_CKBX.setText("2D");
        SetGraphType_MB.add(_2D_CKBX);

        _2D3D_BTNGRP.add(_3D_CKBX);
        _3D_CKBX.setText("3D");
        SetGraphType_MB.add(_3D_CKBX);

        jMenuBar1.add(SetGraphType_MB);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Predict_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Predict_BTNActionPerformed

        Predict_BTN.setEnabled(true);
        Predict_DL.setSize(800, 600);
        Predict_DL.setLocationRelativeTo(null);//will be display in center
        Predict_DL.setVisible(true);

    }//GEN-LAST:event_Predict_BTNActionPerformed

    private void exit_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_BTNActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit_BTNActionPerformed

    private void FindExistData_MIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindExistData_MIActionPerformed
        JFileChooser fc = new JFileChooser("C:\\Users\\user\\Desktop\\資料及\\採礦最終資料\\最後");//預設先顯示D朝裡面的資料
        int status = fc.showOpenDialog(this);//如何結束存在sattus內
        /////
        //File f = new File("E:\\eclipse\\workspace\\box\\Data\\2003-3-7-100.inc");

        /////
        if (status == JFileChooser.CANCEL_OPTION) {
            return;//正常cancel結束 那就不用做事
        } else {//else 抓你選的資料
            File f = fc.getSelectedFile();
            int colSize = 0, rowSize = 0;
            String[] columnNames;
            Object[][] dataValues;
            try {
                ///
                //InputStreamReader read = new InputStreamReader(new FileInputStream(f), "UTF-8");
                //BufferedReader br = new BufferedReader(read);
                BufferedReader br
                        = new BufferedReader(new InputStreamReader(
                                new FileInputStream(f), "CP950"));
                ///
                //BufferedReader br = new BufferedReader(new FileReader(f));//bufferedreader io通道                
                columnNames = br.readLine().split(",");
                String temp = new String("");

                while ((temp = br.readLine()) != null) {
                    System.out.println(temp);
                    dataList.add(temp);
                    switch (temp.toString().split(",")[0].substring(0, 3)) {
                        //EveryMonthCrime
                        case "臺北市":
                            if (temp.toString().split(",")[11].equals("0")) {
                                EveryAreaCrime[1][0] += 1;
                            } else {
                                EveryAreaCrime[1][1] += 1;
                            }
                            break;
                        case "新北市":
                            if (temp.toString().split(",")[11].equals("0")) {
                                EveryAreaCrime[2][0] += 1;
                            } else {
                                EveryAreaCrime[2][1] += 1;
                            }
                            break;
                        case "桃園市":
                            if (temp.toString().split(",")[11].equals("0")) {
                                EveryAreaCrime[3][0] += 1;
                            } else {
                                EveryAreaCrime[3][1] += 1;
                            }
                            break;
                        case "臺中市":
                            if (temp.toString().split(",")[11].equals("0")) {
                                EveryAreaCrime[4][0] += 1;
                            } else {
                                EveryAreaCrime[4][1] += 1;
                            }
                            break;
                        case "高雄市":
                            if (temp.toString().split(",")[11].equals("0")) {
                                EveryAreaCrime[5][0] += 1;
                            } else {
                                EveryAreaCrime[5][1] += 1;
                            }
                            break;
                        case "臺南市":
                            if (temp.toString().split(",")[11].equals("0")) {
                                EveryAreaCrime[6][0] += 1;
                            } else {
                                EveryAreaCrime[6][1] += 1;
                            }
                            break;
                        default:
                            System.out.println("Wrong month");
                    }

                }
                colSize = columnNames.length;
                rowSize = dataList.size();//不用除?
                dataValues = new Object[rowSize][colSize];
                for (int i = 1; i < 7; i++) {
                    System.out.println("1=" + EveryAreaCrime[i][1]);
                }
                drawBarChartWith_JFC(EveryAreaCrime);
                for (int r = 0; r < rowSize; r++) {
                    dataValues[r] = dataList.get(r).toString().split(",");
                    //System.out.println(dataValues[r]);
                    //System.out.println(dataList.get(r));
                }
                //int[] a = new int [5];
                /*String[] cp950= new String[columnNames.length];                
                for(int i=0;i<columnNames.length;i++){
                    System.out.println("column names = "+columnNames[i]);
                    byte ptext[] = columnNames[i].getBytes();
String              value = new String(ptext, "UTF-8");
                    cp950[i] = value;
                    System.out.println("cp950 "+i+" = "+cp950[i]);
                }*/
                colSize = columnNames.length;
                rowSize = dataList.size();
                hasData = true;
                Predict_BTN.setEnabled(true);
                DataSet_BTN.setEnabled(true);
                Analysis_BTN.setEnabled(true);
                System.out.println("datalist(0) = " + dataList.get(0));
                //System.out.println("charat"+dataList.get(0).toString().charAt(0));
                data_TBL.setModel(new DefaultTableModel(dataValues, columnNames_default));//replace with new data
                data_TBL.getTableHeader().setFont(new Font("Arial", Font.BOLD, 16));//第二個參數 有加黑 斜體字 底線等等
                dataAnalysis_TBL.setModel(new DefaultTableModel(dataValues, columnNames_default));//replace with new data
                dataAnalysis_TBL.getTableHeader().setFont(new Font("Arial", Font.BOLD, 16));//第二個參數 有加黑 斜體字 底線等等

            } catch (IOException e) {
                System.out.println(e);
            }

        }
    }//GEN-LAST:event_FindExistData_MIActionPerformed
    public void drawBarChartWith_JFC(int[][] data) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(data[1][1], "Number of Crime", "TAIPEI");
        dataset.setValue(data[2][1], "Number of Crime", "NEW TAIPEI");
        dataset.setValue(data[3][1], "Number of Crime", "TAOYUAN");
        dataset.setValue(data[4][1], "Number of Crime", "TAICHUNG");
        dataset.setValue(data[5][1], "Number of Crime", "KAOHSIUNG");
        dataset.setValue(data[6][1], "Number of Crime", "TAINAN");
        JFreeChart chart = ChartFactory.createBarChart(
                "Teenager Crime of every district in Taiwan",
                "District", "Teenager Crime", dataset,
                PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.GRAY);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);

        ChartPanel chPanel = new ChartPanel(chart); //creating the chart panel, which extends JPanel
        chPanel.setPreferredSize(new Dimension(785, 440)); //size according to my window
        chPanel.setMouseWheelEnabled(true);
        //JPanel p = new JPanel();
        //p.add(chPanel);
        TaiwanTeenagerCrime_PNL.removeAll();
        TaiwanTeenagerCrime_PNL.add(chPanel);
        //TaiwanTeenagerCrime_PNL.updateUI();
        //Show_TBP.add(p);
        //return TaiwanTeenagerCrime_PNL;
        //myChart.setMouseWheelEnabled(true);
        //TaiwanTeenagerCrime_PNL.setLayout(new java.awt.BorderLayout());
        //TaiwanTeenagerCrime_PNL.add(myChart,BorderLayout.CENTER);
        //TaiwanTeenagerCrime_PNL.validate();
    }
    private void FindData_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindData_BTNActionPerformed
        FindExistData_MIActionPerformed(evt);
    }//GEN-LAST:event_FindData_BTNActionPerformed

    private void DataSet_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataSet_BTNActionPerformed
        if (hasData) {
            DataSet_BTN.setEnabled(true);
            DataSet_JDL.setSize(1350, 600);
            DataSet_JDL.setLocationRelativeTo(null);//will be display in center
            DataSet_JDL.setVisible(true);
        }
    }//GEN-LAST:event_DataSet_BTNActionPerformed

    private void Area2_CMBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Area2_CMBXActionPerformed
        //Area1_CMBX

    }//GEN-LAST:event_Area2_CMBXActionPerformed

    private void Area1_CMBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Area1_CMBXActionPerformed
        if (Area1_CMBX.getSelectedItem().toString().equalsIgnoreCase("臺北市")) {
            Area2_CMBX.removeAllItems();
            Area2_CMBX.addItem("北投區");
            Area2_CMBX.addItem("士林區");
            Area2_CMBX.addItem("大同區");
            Area2_CMBX.addItem("中山區");
            Area2_CMBX.addItem("中正區");
            Area2_CMBX.addItem("內湖區");
            Area2_CMBX.addItem("文山區");
            Area2_CMBX.addItem("大安區");
            Area2_CMBX.addItem("松山區");
            Area2_CMBX.addItem("信義區");
            Area2_CMBX.addItem("南港區");
            Area2_CMBX.addItem("萬華區");
        } else if (Area1_CMBX.getSelectedItem().toString().equalsIgnoreCase("新北市")) {
            Area2_CMBX.removeAllItems();
            Area2_CMBX.addItem("八里區");
            Area2_CMBX.addItem("三芝區");
            Area2_CMBX.addItem("三重區");
            Area2_CMBX.addItem("三峽區");
            Area2_CMBX.addItem("土城區");
            Area2_CMBX.addItem("中和區");
            Area2_CMBX.addItem("五股區");
            Area2_CMBX.addItem("平溪區");
            Area2_CMBX.addItem("永和區");
            Area2_CMBX.addItem("石門區");
            Area2_CMBX.addItem("石碇區");
            Area2_CMBX.addItem("汐止區");
            //
            Area2_CMBX.addItem("坪林區");
            Area2_CMBX.addItem("板橋區");
            Area2_CMBX.addItem("林口區");
            Area2_CMBX.addItem("金山區");
            Area2_CMBX.addItem("泰山區");
            Area2_CMBX.addItem("烏來區");
            Area2_CMBX.addItem("貢寮區");
            Area2_CMBX.addItem("淡水區");
            Area2_CMBX.addItem("深坑區");
            Area2_CMBX.addItem("新店區");
            Area2_CMBX.addItem("新莊區");
            Area2_CMBX.addItem("瑞芳區");
            //
            Area2_CMBX.addItem("萬里區");
            Area2_CMBX.addItem("樹林區");
            Area2_CMBX.addItem("雙溪區");
            Area2_CMBX.addItem("蘆洲區");
            Area2_CMBX.addItem("鶯歌區");
        } else if (Area1_CMBX.getSelectedItem().toString().equalsIgnoreCase("桃園市")) {
            Area2_CMBX.removeAllItems();
            Area2_CMBX.addItem("八德區");
            Area2_CMBX.addItem("大園區");
            Area2_CMBX.addItem("大溪區");
            Area2_CMBX.addItem("中壢區");
            Area2_CMBX.addItem("平鎮區");
            Area2_CMBX.addItem("桃園區");
            Area2_CMBX.addItem("復興區");
            Area2_CMBX.addItem("新屋區");
            Area2_CMBX.addItem("楊梅區");
            Area2_CMBX.addItem("龍潭區");
            Area2_CMBX.addItem("龜山區");
            Area2_CMBX.addItem("蘆竹區");
            Area2_CMBX.addItem("觀音區");
        } else if (Area1_CMBX.getSelectedItem().toString().equalsIgnoreCase("高雄市")) {
            Area2_CMBX.removeAllItems();
            Area2_CMBX.addItem("三民區");
            Area2_CMBX.addItem("大社區");
            Area2_CMBX.addItem("大寮區");
            Area2_CMBX.addItem("大樹區");
            Area2_CMBX.addItem("小港區");
            Area2_CMBX.addItem("仁武區");
            Area2_CMBX.addItem("內門區");
            Area2_CMBX.addItem("六龜區");
            Area2_CMBX.addItem("左營區");
            Area2_CMBX.addItem("永安區");
            Area2_CMBX.addItem("田寮區");
            Area2_CMBX.addItem("甲仙區");
            //
            Area2_CMBX.addItem("杉林區");
            Area2_CMBX.addItem("岡山區");
            Area2_CMBX.addItem("林園區");
            Area2_CMBX.addItem("阿蓮區");
            Area2_CMBX.addItem("前金區");
            Area2_CMBX.addItem("前鎮區");
            Area2_CMBX.addItem("美濃區");
            Area2_CMBX.addItem("苓雅區");
            Area2_CMBX.addItem("茂林區");
            Area2_CMBX.addItem("茄萣區");
            Area2_CMBX.addItem("桃源區");
            Area2_CMBX.addItem("梓官區");
            //
            Area2_CMBX.addItem("烏松區");
            Area2_CMBX.addItem("湖內區");
            Area2_CMBX.addItem("新興區");
            Area2_CMBX.addItem("楠梓區");
            Area2_CMBX.addItem("路竹區");
            //
            /////Bar 還沒做 等等回來複製Pie code 去bar研究
            Area2_CMBX.addItem("鼓山區");
            Area2_CMBX.addItem("旗山區");
            Area2_CMBX.addItem("旗津區");
            Area2_CMBX.addItem("鳳山區");
            Area2_CMBX.addItem("橋頭區");
            Area2_CMBX.addItem("燕巢區");
            Area2_CMBX.addItem("彌陀區");
            Area2_CMBX.addItem("鹽埕區");
            //
        } else if (Area1_CMBX.getSelectedItem().toString().equalsIgnoreCase("臺中市")) {
            Area2_CMBX.removeAllItems();
            Area2_CMBX.addItem("大甲區");
            Area2_CMBX.addItem("大肚區");
            Area2_CMBX.addItem("大里區");
            Area2_CMBX.addItem("大雅區");
            Area2_CMBX.addItem("中大安區");
            Area2_CMBX.addItem("中北區");
            Area2_CMBX.addItem("中東區");
            Area2_CMBX.addItem("中南區");
            Area2_CMBX.addItem("中區");
            Area2_CMBX.addItem("太平區");
            Area2_CMBX.addItem("北屯區");
            Area2_CMBX.addItem("外埔區");
            //
            Area2_CMBX.addItem("石岡區");
            Area2_CMBX.addItem("后里區");
            Area2_CMBX.addItem("西屯區");
            Area2_CMBX.addItem("西區");
            Area2_CMBX.addItem("沙鹿區");
            Area2_CMBX.addItem("和平區");
            Area2_CMBX.addItem("東勢區");
            Area2_CMBX.addItem("南屯區");
            Area2_CMBX.addItem("烏日區");
            Area2_CMBX.addItem("神岡區");
            Area2_CMBX.addItem("梧棲區");
            Area2_CMBX.addItem("清水區");
            //
            Area2_CMBX.addItem("新社區");
            Area2_CMBX.addItem("潭子區");
            Area2_CMBX.addItem("龍井區");
            Area2_CMBX.addItem("豐原區");
            Area2_CMBX.addItem("霧峰區");
        } else if (Area1_CMBX.getSelectedItem().toString().equalsIgnoreCase("臺南市")) {
            Area2_CMBX.removeAllItems();
            Area2_CMBX.addItem("七股區");
            Area2_CMBX.addItem("下營區");
            Area2_CMBX.addItem("大內區");
            Area2_CMBX.addItem("山上區");
            Area2_CMBX.addItem("中西區");
            Area2_CMBX.addItem("仁德區");
            Area2_CMBX.addItem("大甲區");
            Area2_CMBX.addItem("北門區");
            Area2_CMBX.addItem("左營區");
            Area2_CMBX.addItem("永康區");
            Area2_CMBX.addItem("玉井區");
            Area2_CMBX.addItem("白河區");
            //
            Area2_CMBX.addItem("安平區");
            Area2_CMBX.addItem("安定區");
            Area2_CMBX.addItem("安南區");
            Area2_CMBX.addItem("西港區");
            Area2_CMBX.addItem("佳里區");
            Area2_CMBX.addItem("官田區");
            Area2_CMBX.addItem("東山區");
            Area2_CMBX.addItem("南化區");
            Area2_CMBX.addItem("南北區");
            Area2_CMBX.addItem("南東區");
            Area2_CMBX.addItem("南南區");
            Area2_CMBX.addItem("後壁區");
            //
            Area2_CMBX.addItem("柳營區");
            Area2_CMBX.addItem("將軍區");
            Area2_CMBX.addItem("麻豆區");
            Area2_CMBX.addItem("善化區");
            Area2_CMBX.addItem("新化區");
            //
            Area2_CMBX.addItem("新市區");
            Area2_CMBX.addItem("新營區");
            Area2_CMBX.addItem("楠西區");
            Area2_CMBX.addItem("學甲區");
            Area2_CMBX.addItem("龍崎區");
            Area2_CMBX.addItem("歸仁區");
            Area2_CMBX.addItem("關廟區");
            Area2_CMBX.addItem("鹽水區");
            //
        } else {
            System.out.println("error");
        }
    }//GEN-LAST:event_Area1_CMBXActionPerformed

    private void ShowPie_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPie_BTNActionPerformed
        String area1, area2;
        if ((!(Area1_CMBX.getSelectedItem() == null)) && (!(Area2_CMBX.getSelectedItem() == null))) {
            area1 = Area1_CMBX.getSelectedItem().toString();
            area2 = Area2_CMBX.getSelectedItem().toString();
            int drugs = 0, police = 0, religion = 0, accident = 0, steal = 0, count = 0;
            String Area = new String(area1 + area2);
            int[] CrimeCount = new int[2];
            for (int i = 0; i < dataList.size(); i++) {
                String[] AfterSplit = dataList.get(i).toString().split(",");
                if (Area.equals(AfterSplit[0])) {
                    count++;
                    if (AfterSplit[11].equals("0")) {
                        CrimeCount[0] += 1;
                    } else {
                        CrimeCount[1] += 1;
                    }
                    System.out.println("drugs = " + Integer.valueOf(AfterSplit[3]) + " & " + drugs);
                    drugs += Integer.valueOf(AfterSplit[3]);
                    police += Integer.valueOf(AfterSplit[4]);
                    religion += Integer.valueOf(AfterSplit[6]);
                    accident += Integer.valueOf(AfterSplit[10]);
                    steal += Integer.valueOf(AfterSplit[7]);
                }
            }
            System.out.println("count = " + count);

            String r = "", p = "";
            drugs = drugs / count;
            police = police / count;
            religion = religion / count;
            accident = accident / count;
            steal = steal / count;
            //summary_TA.removeAll();
            summary_TA.setText("");
            summary_TA.append("Summary :\n");
            summary_TA.append("Mean&std of \"Drugs\" in Data = 24  38\n");
            summary_TA.append("Mean&std of \"Accident\" in Data = 105  122\n");
            summary_TA.append("Mean&std of \"Steal\" in Data = 3  5\n");
            summary_TA.append("\n\n" + Area + " :\n");
            summary_TA.append("Mean of \"Drugs\" in " + Area + " = " + String.valueOf(drugs) + "\n");
            summary_TA.append("Mean of \"accident\" in " + Area + " = " + String.valueOf(accident) + "\n");
            summary_TA.append("Mean of \"steal\" in " + Area + " = " + String.valueOf(steal) + "\n");
            if (religion <= 33) {
                r = "Low";
            } else if (religion > 33 && religion <= 66) {
                r = "Medium";
            } else {
                r = "High";
            }
            if (police <= 5) {
                p = "Low";
            } else if (police > 5 && police <= 10) {
                p = "Medium";
            } else {
                p = "High";
            }
            summary_TA.append("Mean of \"religion\" in " + Area + " = " + String.valueOf(religion) + " " + r + "\n");
            summary_TA.append("Mean of \"police station\" in " + Area + " = " + String.valueOf(police) + " " + p + "\n");
            summary_TA.append("Crime percent = ");
            System.out.println("crime = " + CrimeCount[0] + " " + CrimeCount[1]);
            double d1 = Math.round(((double) CrimeCount[1] / (double) (CrimeCount[1] + CrimeCount[0])) * 10000.0) / 100.0;
            double d2 = Math.round(((double) CrimeCount[0] / (double) (CrimeCount[1] + CrimeCount[0])) * 10000.0) / 100.0;
            System.out.println("d1 =" + d1);
            summary_TA.append(String.valueOf(d1) + "%\n");
            summary_TA.append("non-Crime percent = ");
            summary_TA.append(String.valueOf(d2) + "%\n");
            drawPieChartWith_JFC(CrimeCount);
        }
    }//GEN-LAST:event_ShowPie_BTNActionPerformed

    private void Analysis_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Analysis_BTNActionPerformed
        if (hasData) {
            Analysis_BTN.setEnabled(true);
            Analysis_JDL.setSize(800, 600);
            Analysis_JDL.setLocationRelativeTo(null);//will be display in center
            Analysis_JDL.setVisible(true);
            //dataAnalysis_TBL=data_TBL;
        }
    }//GEN-LAST:event_Analysis_BTNActionPerformed

    private void Conn_DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Conn_DBActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            /*String connString = 	"jdbc:mysql://"  +host + "/" +db + ?user=” + userName + "&password=" + passWord+"&port=" + port;*/
            //String connString ="jdbc:mysql://localhost/world/?user=root&password=12345&port=3307";
            String url = "jdbc:mysql://localhost:3306/world?useSSL=false&serverTimezone=GMT%2B8";
            /////String connString = "jdbc:mysql://localhost:3306/world?user=root&password=12345";

            /////conn = DriverManager.getConnection(connString);
            conn = DriverManager.getConnection(url, "root", "12345");
            if (conn == null) {
                System.out.println("connection fail");
                return;
            }
            Statement stmt = conn.createStatement();//java.sql to debug
            result = stmt.executeQuery(query);//rs=result

            colSize = result.getMetaData().getColumnCount();
            columnNames = new String[colSize];

            for (int c = 0; c < colSize; c++) {
                System.out.print(result.getMetaData().getColumnName(c + 1) + "\t");//sql start with 1   
                columnNames[c] = result.getMetaData().getColumnName(c + 1);
            }
            System.out.println();

            result.last();
            rowSize = result.getRow();
            System.out.println("sql rowsize = " + rowSize);
            data = new Object[rowSize][colSize];
            result.beforeFirst();

            int r = 0;//c=row
            while (result.next()) {
                //System.out.println(result.getString(1)); #this line will only print column = 1
                for (int c = 0; c < colSize; c++) {//c=col
                    System.out.print(result.getString(c + 1) + "\t");//sql start with 1 not 0
                    data[r][c] = result.getString(c + 1);
                }
                r++;
                System.out.println();
            }
            hasData = true;
            Predict_BTN.setEnabled(true);
            DataSet_BTN.setEnabled(true);
            Analysis_BTN.setEnabled(true);
            conn.close();
            data_TBL.setModel(new DefaultTableModel(data, columnNames));//display in right of design interface
            data_TBL.getTableHeader().setFont(new Font("Arial", Font.BOLD, 16));
            dataAnalysis_TBL.setModel(new DefaultTableModel(data, columnNames));//display in right of design interface
            dataAnalysis_TBL.getTableHeader().setFont(new Font("Arial", Font.BOLD, 16));

        } catch (Exception ex) {
            ex.printStackTrace();
        };


    }//GEN-LAST:event_Conn_DBActionPerformed

    private void Submit_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_BTNActionPerformed
        if (!sql_TA.getText().isEmpty()) {
            query = sql_TA.getText();
        }
        //fromDB_MIActionPerformed(evt);//call fromDB , parameter = evt
        Conn_DBActionPerformed(evt);
        ShowPieChart_BTN.setEnabled(true);
    }//GEN-LAST:event_Submit_BTNActionPerformed

    private void ShowPieChart_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPieChart_BTNActionPerformed

        try {
            drawPieChartWith_JFC();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(DM.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DM.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ShowPieChart_BTNActionPerformed

    private void ClearData_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearData_BTNActionPerformed
        dataList.clear();
        TaiwanTeenagerCrime_PNL.removeAll();
        Analysis_BTN.setEnabled(false);
        DataSet_BTN.setEnabled(false);
        Predict_BTN.setEnabled(false);
        hasData = false;
    }//GEN-LAST:event_ClearData_BTNActionPerformed

    private void SaveChart_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveChart_BTNActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            /*String connString = 	"jdbc:mysql://"  +host + "/" +db + ?user=” + userName + "&password=" + passWord+"&port=" + port;*/
            //String connString ="jdbc:mysql://localhost/world/?user=root&password=12345&port=3307";
            String url="jdbc:mysql://localhost:3306/world?useSSL=false&serverTimezone=GMT%2B8";
            //Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
           /// String connString = "jdbc:mysql://localhost:3307/world?user=root&password=12345";

            Connection iConn = DriverManager.getConnection(url,"root","12345");
            if (iConn == null) {
                System.out.println("connection fail");
                return;
            }
            PreparedStatement stmt = iConn.prepareStatement(insertimageQuery);//java.sql to debug            
            if (stmt == null) {
                System.out.println("statement object fail");
                return;
            }
            //before submit need setfirst//note follows 1,2,3 depend on your DB attributes
            stmt.setInt(1, ++chart_id);//1 = column1//set int
            stmt.setString(2, "Chart Number: " + chart_id);//column2//set string

            BufferedImage bi = chart.createBufferedImage(800, 600);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();//be used to contain bits for the image chart
            ImageIO.write(bi, "png", baos);//write image to baso
            stmt.setBinaryStream(3, new ByteArrayInputStream(baos.toByteArray()));//column3//set image        
            stmt.executeUpdate();//sql statement            
            iConn.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        };
    }//GEN-LAST:event_SaveChart_BTNActionPerformed

    private void browseSaveChart_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSaveChart_BTNActionPerformed
        
        browseChart_DLG.setSize(800, 600);
        browseChart_DLG.setLocationRelativeTo(null);//will be display in center
        browseChart_DLG.setVisible(true);
    }//GEN-LAST:event_browseSaveChart_BTNActionPerformed

    private void previous_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previous_BTNActionPerformed
        try {
            if (!imageRS.previous()) {//return boolean // if true == yes , we can find previous data
                JOptionPane.showMessageDialog(null, "No Image available!");
                imageRS.first();
                return;
            }
            chartID_TF.setText(imageRS.getString(1));
            description_TA.setText(imageRS.getString(2));
            BufferedImage bi = ImageIO.read(imageRS.getBinaryStream(3));//轉換成2元通道 再用imageIO的方法讀他//然後read的結果會回傳bufferedimage
            chartImage_LBL.setIcon(new ImageIcon(bi));//把剛剛站存到bi的東西轉換回去成圖檔去set
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_previous_BTNActionPerformed

    private void next_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next_BTNActionPerformed
        try {
            if (!imageRS.next()) {//return boolean // if true == yes , we can find previous data
                JOptionPane.showMessageDialog(null, "No Image available!");
                imageRS.last();
                return;
            }
            chartID_TF.setText(imageRS.getString(1));
            description_TA.setText(imageRS.getString(2));
            BufferedImage bi = ImageIO.read(imageRS.getBinaryStream(3));//轉換成2元通道 再用imageIO的方法讀他//然後read的結果會回傳bufferedimage
            chartImage_LBL.setIcon(new ImageIcon(bi));//把剛剛站存到bi的東西轉換回去成圖檔去set
        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_next_BTNActionPerformed

    private void ConnectImageDB_TGLBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectImageDB_TGLBTNActionPerformed
        try {
            if (ConnectImageDB_TGLBTN.isSelected()) {
                ConnectImageDB_TGLBTN.setText("Reset Connection");
            } else {
                ConnectImageDB_TGLBTN.setText("Connect image DB");
                imageRS = null;
                previous_BTN.setEnabled(false);
                next_BTN.setEnabled(false);
                chartImage_LBL.setIcon(null);
                description_TA.setText(null);///
                chartID_TF.setText(null);///
                if (imageConn != null) {
                    imageConn.close();
                }
                return;
            }
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            /*String connString = 	"jdbc:mysql://"  +host + "/" +db + ?user=” + userName + "&password=" + passWord+"&port=" + port;*/
            //String connString ="jdbc:mysql://localhost/world/?user=root&password=12345&port=3307";
            String url="jdbc:mysql://localhost:3306/world?useSSL=false&serverTimezone=GMT%2B8";
            //Class.forName("com.mysql.jdbc.Driver").newInstance();
            // String connString = "jdbc:mysql://localhost:3307/world?user=root&password=12345";

            imageConn = DriverManager.getConnection(url,"root","12345");
            if (imageConn == null) {
                System.out.println("connection fail");
                return;
            }
            Statement stmt = imageConn.createStatement();//java.sql to debug
            if (stmt == null) {
                System.out.println("stmt is null//staement object fail");
                return;
            }
            imageRS = stmt.executeQuery("SELECT * FROM chart_image;");//rs=result
            previous_BTN.setEnabled(true);
            next_BTN.setEnabled(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        };
    }//GEN-LAST:event_ConnectImageDB_TGLBTNActionPerformed
    public void drawPieChartWith_JFC() throws UnsupportedEncodingException, IOException {
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        ///*****query : SELECT Gender,avg(weight),avg(height) from brain group by gender*****
        //query : select Continent,avg(Population) from country group by Continent;
        //query : SELECT Gender,avg(FSIQ) from brain group by gender
        //query : select Gender ,avg(Weight) from brain group by Gender
        //demo : pieDataset.setValue("One", new Integer(10));
        //select Area,avg(Religion) from h group by Area;
        //BufferedReader br = new BufferedReader(new InputStreamReader( new FileInputStream(f), "CP950"));
        for (int r = 0; r < rowSize; r++) {
            //front = nominal in pie ,, rear = count who in pie   new StringReader(res)

            //BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream((File)data[r][0]),"CP950"));
            pieDataset.setValue(data[r][0].toString(), Float.valueOf(data[r][1].toString()));
            
        }
        if (_3D_CKBX.isSelected()) {
            chart = ChartFactory.createPieChart3D("Pie Chart using JFreeChart", pieDataset, true, true, true);
        } else {
            chart = ChartFactory.createPieChart("Pie Chart using JFreeChart", pieDataset, true, true, true);
        }
        /*PiePlot plot = (PiePlot)chart.getPlot();
        //設置標籤字體、風格、字號
        plot.setLabelFont(new Font("Arial",Font.ITALIC,15));
        //設置前景色半透明
        plot.setForegroundAlpha(0.6f);
        //設置標籤信息格式
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0},{1}/{3},{2}"));
        */
        //JFreeChart jfree = ChartFactory.createPieChart("某公司人員組織結構圖",pieDataset,true,true,false); 
        ChartFrame frame1 = new ChartFrame("統開期末報告", chart);
        //frame1.pack();
        //cf.setVisible(true);
        frame1.setVisible(true);
        frame1.setSize(500, 500);
        frame1.setLocationRelativeTo(null);
    }

    public static String toUtf8(String str) throws UnsupportedEncodingException {
        return new String(str.getBytes("CP950"), "CP950"); 
    
    }
    public void drawPieChartWith_JFC(int[] count) {
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        //pieDataset.setValue ("One", new Integer(10));
        //pieDataset.setValue ("Two", new Integer(20));
        //System.out.println(count[0]+" "+count[1]);

        /*for (int r = 0; r < rowSize; r++) {
            //front = nominal in pie ,, rear = count who in pie
            pieDataset.setValue(data[r][0].toString(), Float.valueOf(data[r][1].toString()));
        }*/
        pieDataset.setValue("Number of Nothing", count[0]);
        pieDataset.setValue("Number of Teenager Crime", count[1]);
        if (_3D_CKBX.isSelected()) {
            chart = ChartFactory.createPieChart3D("Pie Chart using JFreeChart", pieDataset, true, true, true);
        } else {
            chart = ChartFactory.createPieChart("Pie Chart using JFreeChart", pieDataset, true, true, true);
        }

        //PredictTeenCrime_LB.setIcon((Icon)chart);
        ChartFrame frame1 = new ChartFrame("Pie Chart", chart);
        frame1.setVisible(true);
        frame1.setSize(500, 500);
        frame1.setLocationRelativeTo(null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Analysis_BTN;
    private javax.swing.JDialog Analysis_JDL;
    private javax.swing.JComboBox<String> Area1_CMBX;
    private javax.swing.JLabel Area1_LB;
    private javax.swing.JComboBox<String> Area2_CMBX;
    private javax.swing.JLabel Area2_LB;
    private javax.swing.JPanel ChooseArea_PNL;
    private javax.swing.JButton ClearData_BTN;
    private javax.swing.JButton Conn_DB;
    private javax.swing.JToggleButton ConnectImageDB_TGLBTN;
    private javax.swing.JButton DataSet_BTN;
    private javax.swing.JDialog DataSet_JDL;
    private javax.swing.JButton FindData_BTN;
    private javax.swing.JMenuItem FindExistData_MI;
    private javax.swing.JButton Predict_BTN;
    private javax.swing.JDialog Predict_DL;
    private javax.swing.JPanel SQL_PNL;
    private javax.swing.JButton SaveChart_BTN;
    private javax.swing.JMenu SetGraphType_MB;
    private javax.swing.JButton ShowPieChart_BTN;
    private javax.swing.JButton ShowPie_BTN;
    private javax.swing.JTabbedPane Show_TBP;
    private javax.swing.JButton Submit_BTN;
    private javax.swing.JPanel TaiwanTeenagerCrime_PNL;
    private javax.swing.ButtonGroup _2D3D_BTNGRP;
    private javax.swing.JCheckBoxMenuItem _2D_CKBX;
    private javax.swing.JCheckBoxMenuItem _3D_CKBX;
    private javax.swing.JDialog browseChart_DLG;
    private javax.swing.JButton browseSaveChart_BTN;
    private javax.swing.JTextField chartID_TF;
    private javax.swing.JLabel chartImage_LBL;
    private javax.swing.JTable dataAnalysis_TBL;
    private javax.swing.JTable data_TBL;
    private javax.swing.JTextArea description_TA;
    private javax.swing.JButton exit_BTN;
    private javax.swing.JMenu file;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JInternalFrame jInternalFrame4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton next_BTN;
    private javax.swing.JButton previous_BTN;
    private javax.swing.JTextArea sql_TA;
    private javax.swing.JTextArea summary_TA;
    private javax.swing.JLabel welcome_LB;
    // End of variables declaration//GEN-END:variables
}
